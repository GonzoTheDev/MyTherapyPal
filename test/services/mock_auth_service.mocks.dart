// Mocks generated by Mockito 5.4.4 from annotations
// in my_therapy_pal/test/services/mock_auth_service.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:my_therapy_pal/services/auth_service.dart' as _i5;
import 'package:my_therapy_pal/services/encryption/AES/encryption_service.dart'
    as _i3;
import 'package:my_therapy_pal/services/encryption/RSA/rsa.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRSAEncryption_0 extends _i1.SmartFake implements _i2.RSAEncryption {
  _FakeRSAEncryption_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAESKeyEncryptionService_1 extends _i1.SmartFake
    implements _i3.AESKeyEncryptionService {
  _FakeAESKeyEncryptionService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i5.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RSAEncryption get rsaEncryption => (super.noSuchMethod(
        Invocation.getter(#rsaEncryption),
        returnValue: _FakeRSAEncryption_0(
          this,
          Invocation.getter(#rsaEncryption),
        ),
      ) as _i2.RSAEncryption);

  @override
  _i3.AESKeyEncryptionService get aesKeyEncryptionService =>
      (super.noSuchMethod(
        Invocation.getter(#aesKeyEncryptionService),
        returnValue: _FakeAESKeyEncryptionService_1(
          this,
          Invocation.getter(#aesKeyEncryptionService),
        ),
      ) as _i3.AESKeyEncryptionService);

  @override
  _i4.FirebaseFirestore get db => (super.noSuchMethod(
        Invocation.getter(#db),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#db),
        ),
      ) as _i4.FirebaseFirestore);

  @override
  set db(_i4.FirebaseFirestore? _db) => super.noSuchMethod(
        Invocation.setter(
          #db,
          _db,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<String?> registration({
    required String? email,
    required String? password,
    required String? passwordConfirm,
    required String? fname,
    required String? sname,
    required String? userType,
    String? address,
    String? phone,
    List<String>? disciplines,
    String? ratesFrom,
    String? ratesTo,
    bool? isTherapistListingEnabled,
    required double? latitude,
    required double? longitude,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #registration,
          [],
          {
            #email: email,
            #password: password,
            #passwordConfirm: passwordConfirm,
            #fname: fname,
            #sname: sname,
            #userType: userType,
            #address: address,
            #phone: phone,
            #disciplines: disciplines,
            #ratesFrom: ratesFrom,
            #ratesTo: ratesTo,
            #isTherapistListingEnabled: isTherapistListingEnabled,
            #latitude: latitude,
            #longitude: longitude,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<String?> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);
}
