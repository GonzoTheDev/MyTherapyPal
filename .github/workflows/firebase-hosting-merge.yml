# This file was auto-generated by the Firebase CLI
# https://github.com/firebase/firebase-tools

name: Deploy to Firebase Hosting on merge 
'on':
  push:
    branches:
      - main
jobs:
  run_all:
    if: false
    name: Run all jobs
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Run all jobs
        run: echo "Run all jobs"
  test_flutter:
    name: Unit & Widget Tests
    needs: run_all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v1
        with:
          channel: 'master'
      - run: flutter pub get
      - run: flutter test
  build_web:
    if: true
    name: Build Flutter (Web)
    needs: test_flutter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v1
        with:
            channel: 'master'
      - run: flutter clean
      - run: flutter upgrade
      - run: flutter pub get
      - run: flutter pub upgrade
      - run: flutter config --enable-web
      - run: flutter build web --web-renderer canvaskit --release
      - name: Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: web-build
          path: build/web
  deploy_web:
    if: true
    name: Deploy Web to Firebase Hosting
    needs: build_web
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@master
      - name: Download Artifact
        uses: actions/download-artifact@master
        with:
          name: web-build
          path: build/web
      - name: Deploy to Firebase
        uses: w9jds/firebase-action@v13.4.0
        with:
          args: deploy --only hosting --public build/web
        env:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          channelId: live
          projectId: mytherapypal
  build_apk:
    if: true
    name: Build Flutter (Android)
    needs: test_flutter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"
        env:
          KEY_JKS: ${{secrets.RELEASE_KEYSTORE}}
          SIGNING_KEY_ALIAS: ${{secrets.ALIAS}}
          SIGNING_KEY_PASSWORD: ${{secrets.ALIAS_PASSWORD}}
          SIGNING_STORE_PASSWORD: ${{secrets.KEY_PASSWORD}}
      - name: Decode Keystore
        run: |
          echo "${{secrets.RELEASE_KEYSTORE}}" > release.keystore.asc
          gpg --batch --passphrase "${{secrets.RELEASE_KEYSTORE_PASSPHRASE}}" -d release.keystore.asc > android/key.jks
      - name: Create key.properties
        run: |
          touch android/key.properties
          echo "storePassword=${{secrets.KEY_PASSWORD}}
          keyPassword=${{secrets.ALIAS_PASSWORD}}
          keyAlias=${{secrets.ALIAS}}
          storeFile=../key.jks"  > ./android/key.properties
      - name: Get dependencies
        run: flutter pub get
      - name: Build APK
        run: flutter build apk
      - uses: actions/upload-artifact@v2      
        with:        
          name: release-apk        
          path: build/app/outputs/apk/release/app-release.apk
  beta_apk:
    if: true
    name: Upload Android Beta to Firebase App Distribution
    needs: [build_apk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: release-apk
      - name: Upload APK
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: ${{secrets.FIREBASE_ANDROID_APPID}}
          token: ${{secrets.FIREBASE_TOKEN}}
          file: app-release.apk
  build_ios:
    if: true
    name: Build Flutter (iOS)
    #needs: test_flutter
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - name: Install Apple Certificate
      env:
        IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}
        IOS_CERTIFICATE_PWD: ${{ secrets.IOS_CERTIFICATE_PWD }}
        KEYCHAIN_NAME: build.keychain
        KEYCHAIN_PWD: hello
      run: |
        echo $IOS_CERTIFICATE | base64 --decode > certificate.p12
        security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_NAME
        security default-keychain -s $KEYCHAIN_NAME
        security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_NAME
        security import certificate.p12 -k $KEYCHAIN_NAME -P $IOS_CERTIFICATE_PWD -T /usr/bin/codesign
    - name: Install Provisioning Profile
      env:
        PROVISIONING_CERTIFICATE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE }}
      run: |
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
    
        echo -n "$PROVISIONING_CERTIFICATE_BASE64" | base64 --decode --output $PP_PATH
    
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    - uses: subosito/flutter-action@v1
      with:
          channel: 'stable'
    - run: flutter clean
    - run: flutter upgrade
    - run: flutter pub get
    - run: flutter pub upgrade
    #- run: flutter build ipa --release --export-options-plist=ios/ExportOptions.plist
    - name: Build resolve Swift dependencies
      run: xcodebuild -resolvePackageDependencies -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release
    - name: Build xArchive
      run: |
        xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release DEVELOPMENT_TEAM=V4969Q592K -sdk 'iphoneos' -destination 'generic/platform=iOS' -archivePath build-output/app.xcarchive PROVISIONING_PROFILE=493d9cbb-740c-49b8-afc9-96c638fba7a7 clean archive CODE_SIGN_IDENTITY="iPhone Distribution: Shane Buckley (V4969Q592K)"
    - name: Export IPA
      run: xcodebuild -exportArchive -archivePath build-output/app.xcarchive -exportPath build-output/ios -exportOptionsPlist ios/ExportOptions.plist
      working-directory: .
    - name: Upload IPA
      uses: actions/upload-artifact@v2 
      with:
        name: ios-build
        path: build/ios/ipa/*.ipa
  beta_ios:
    if: true
    name: Upload iOS Beta to Firebase App Distribution
    needs: [build_ios]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: ios-build
    - name: Upload IPA
      uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
      with:
        appId: ${{secrets.FIREBASE_IOS_APPID}}
        token: ${{secrets.FIREBASE_TOKEN}}
        file: Runner.ipa
  build_macos:
    if: true
    name: Build Flutter (macOS)
    needs: test_flutter
    runs-on: macOS-latest
    env:
      MACOS_APP_RELEASE_PATH: build/macos/Build/Products/Release
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          channel: 'stable'
      - name: Build Executable
        run: |
          flutter clean
          flutter upgrade
          flutter pub get
          flutter pub upgrade
          flutter config --enable-macos-desktop
          flutter build macos --release 
      - name: Codesign Executable
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_APP_RELEASE_PATH: ${{ env.MACOS_APP_RELEASE_PATH }}
          KEYCHAIN_NAME: build.keychain
          KEYCHAIN_PWD: hello
        run: |
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security create-keychain -p $KEYCHAIN_PWD $KEYCHAIN_NAME
          security default-keychain -s $KEYCHAIN_NAME
          security unlock-keychain -p $KEYCHAIN_PWD $KEYCHAIN_NAME
          security import certificate.p12 -k $KEYCHAIN_NAME -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PWD $KEYCHAIN_NAME
          security find-identity -v
          /usr/bin/codesign --force --deep -s V4969Q592K ./$MACOS_APP_RELEASE_PATH/my_therapy_pal.app
      - name: Create DMG
        run: |
          echo "Install create-dmg"
          brew install create-dmg
          if [ -d "${{ env.MACOS_APP_RELEASE_PATH }}" ]; then
            cd "${{ env.MACOS_APP_RELEASE_PATH }}"
            create-dmg \
              --volname "my_therapy_pal" \
              --window-pos 200 120 \
              --window-size 800 529 \
              --icon-size 130 \
              --text-size 14 \
              --icon "my_therapy_pal.app" 260 250 \
              --hide-extension "my_therapy_pal.app" \
              --app-drop-link 540 250 \
              --hdiutil-quiet \
              "my_therapy_pal.dmg" \
              "my_therapy_pal.app"
          else
            echo "Directory ${$MACOS_APP_RELEASE_PATH} does not exist."
            exit 1
          fi
      - name: Upload DMG
        uses: actions/upload-artifact@v2 
        with:
          name: macos-build
          path: ${{ env.MACOS_APP_RELEASE_PATH }}/my_therapy_pal.dmg
        env:
          MACOS_APP_RELEASE_PATH: ${{ env.MACOS_APP_RELEASE_PATH }}
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
          MACOS_IDENTITY: ${{secrets.MACOS_IDENTITY}} 
  beta_macos:
    if: true
    name: Upload macOS Beta to Firebase App Distribution
    needs: [build_macos]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: macos-build
    - name: Upload DMG
      uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
      with:
        appId: ${{secrets.FIREBASE_MACOS_APPID}}
        token: ${{secrets.FIREBASE_TOKEN}}
        file: MyTherapyPal.dmg